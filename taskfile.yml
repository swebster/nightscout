version: '3'

vars:
  DOCKER:
    sh: basename $(command -v podman || command -v docker)
  QUADLET_DIR: '{{.XDG_CONFIG_HOME | default (printf "%s/.config" .HOME)}}/containers/systemd'
  PODLET_FILE: .task/quadlet.config
  INSTALL_STANZA: '\n\[Install\]\nWantedBy=default.target'
env:
  COMPOSE_ENV_FILES: .env,.env.local
run: when_changed

tasks:
  config:compose:
    vars:
      CONFIG_FILE: '{{dir .QUADLET_DIR | printf "%s/containers.conf"}}'
    cmds:
      - mkdir -p {{dir .CONFIG_FILE}}
      - printf '[engine]\ncompose_warning_logs=false\n' > {{.CONFIG_FILE}}
    status:
      - test {{base .HOME}} != podman || test -f {{.CONFIG_FILE}}

  config:local:
    cmds:
      - ./configure_local.sh
    interactive: true
    sources:
      - configure_local.sh
    generates:
      - .env.local

  config:secrets:
    deps: [config:local]
    cmds:
      - ./configure_secrets.sh
    interactive: true
    sources:
      - configure_secrets.sh
    generates:
      - .env.secrets

  config:secrets:truncate:
    prompt: |-
      This task will truncate .env.secrets for security. It is intended to be used
      after you have installed Nightscout as a service and verified service:start.

      Please note that the truncation of .env.secrets will disable compose:up until
      that file has been deleted manually. Are you sure you want to continue?
    cmds:
      - truncate -s 0 .env.secrets
    status:
      - test ! -f .env.secrets || test ! -s .env.secrets

  service:install:
    deps: [config:local]
    cmds:
      - task: service:uninstall
      - ./configure_quadlet.sh
      - task: service:reload
    sources:
      - .env
      - .env.local
      - configure_quadlet.sh
      - docker-compose.yml
      - docker-compose.networks.yml
    generates:
      - '{{.PODLET_FILE}}'
    preconditions:
      - sh: test -d /run/systemd/system
        msg: Service tasks are only supported when using systemd.

  service:secrets:
    deps: [config:secrets]
    vars:
      MISSING_SECRETS:
        sh: >
          test {{.DOCKER}} != podman ||
          grep -v COMPOSE_FILE .env.secrets.template | awk -F= '{print tolower($1)}' |
            xargs -I{} sh -c '{{.DOCKER}} secret exists {} || printf "%s\n" {}'
    cmds:
      - for: { var: MISSING_SECRETS }
        cmd: >
          grep -iq {{.ITEM}} .env.secrets &&
          awk -F= '$1 == "{{upper .ITEM}}" {printf("%s", $2)}' .env.secrets |
            {{.DOCKER}} secret create {{.ITEM}} -
    preconditions:
      - sh: test {{.DOCKER}} = podman
        msg: Installation of secrets is only supported when using podman.
    status:
      - test {{len .MISSING_SECRETS}} -eq 0

  service:disable:
    deps: [service:stop]
    vars:
      ENABLED_UNITS:
        sh: >
          grep '^{{.QUADLET_DIR}}/' {{.PODLET_FILE}} |
            xargs grep -Plsz '{{.INSTALL_STANZA}}' || true
    cmds:
      - for: { var: ENABLED_UNITS }
        cmd: sed -i -z 's/{{.INSTALL_STANZA}}\n//' '{{.ITEM}}'
      - task: service:reload
    status:
      - test {{len .ENABLED_UNITS}} -eq 0

  service:enable:
    deps: [service:start]
    vars:
      DISABLED_UNITS:
        sh: >
          grep '^{{.QUADLET_DIR}}/' {{.PODLET_FILE}} |
            xargs grep -PLsz '{{.INSTALL_STANZA}}' || true
    cmds:
      - for: { var: DISABLED_UNITS }
        cmd: sed -i '$a\{{.INSTALL_STANZA}}' '{{.ITEM}}'
      - task: service:reload
    status:
      - test {{len .DISABLED_UNITS}} -eq 0

  service:reload:
    internal: true
    cmds:
      - systemctl --user daemon-reload
    run: always

  service:start:
    deps: [compose:images, service:secrets, service:install]
    cmds:
      - task: systemctl:start

  service:status:
    deps: [service:install]
    cmds:
      - task: systemctl:status
        vars: { IGNORE_ERRORS: true }

  service:stop:
    cmds:
      - task: systemctl:stop
        vars: { REVERSE_ORDER: true }
    status:
      - test ! -f {{.PODLET_FILE}}

  service:uninstall:
    deps: [service:stop]
    cmds:
      - grep '^{{.QUADLET_DIR}}/' {{.PODLET_FILE}} | xargs rm
      - rm {{.PODLET_FILE}}
      - task: service:reload
    status:
      - test ! -f {{.PODLET_FILE}}

  systemctl:*:
    internal: true
    vars:
      COMMAND: '{{index .MATCH 0}}'
      SORT: '{{eq .REVERSE_ORDER true | ternary "sort -r" "sort"}}'
      SERVICES:
        sh: sed -n 's|^{{.QUADLET_DIR}}/\(.*\)\.container|\1|gp' {{.PODLET_FILE}} | {{.SORT}}
      EXIT_CODE: '{{eq .IGNORE_ERRORS true | ternary 0 `$?`}}'
    cmds:
      - sh -c 'systemctl --user {{.COMMAND}} {{splitList "\n" .SERVICES | join " "}};
        exit {{.EXIT_CODE}}'
    preconditions:
      - sh: test -f {{.PODLET_FILE}}

  compose:images:
    deps: [config:compose, config:local]
    vars:
      SORT: sed -E 's|^docker.io/(library/)?||' | sort
      IMAGE_FORMAT: '{{`{{.Repository}}:{{.Tag}}`}}'
      MISSING_IMAGES:
        sh: >
          comm -23
          <(set -a; source .env.local; {{.DOCKER}} compose config --images | {{.SORT}})
          <({{.DOCKER}} images --filter dangling=false --format {{.IMAGE_FORMAT}} | {{.SORT}})
    cmds:
      - test {{len .MISSING_IMAGES}} -eq 0 || echo "Couldn't find the following images:"
      - for: { var: MISSING_IMAGES }
        cmd: printf '%s\n' {{.ITEM}}
      - '{{.DOCKER}} compose pull cloudflared mongo'
      - '{{.DOCKER}} compose build nightscout caddy'
    sources:
      - caddy/*
      - cgm-remote-monitor/*
    status:
      - test {{len .MISSING_IMAGES}} -eq 0

  compose:ps:
    deps: [config:compose, config:local]
    cmds:
      - '{{.DOCKER}} compose ps'

  compose:up:
    deps: [config:secrets, compose:images]
    env:
      COMPOSE_ENV_FILES: '{{printf "%s,.env.secrets" .COMPOSE_ENV_FILES}}'
    cmds:
      - '{{.DOCKER}} compose up --detach'
    preconditions:
      - sh: test -s .env.secrets
        msg: Compose is currently disabled as .env.secrets has been truncated.

  compose:down:
    deps: [config:secrets, compose:images]
    env:
      COMPOSE_ENV_FILES: '{{printf "%s,.env.secrets" .COMPOSE_ENV_FILES}}'
    cmds:
      - '{{.DOCKER}} compose down'

  default:
    vars:
      INSTALLED:
        sh: test -f .task/quadlet.config && echo true || echo false
    cmds:
      - task: '{{if eq .INSTALLED "true"}}{{"service:status"}}{{else}}{{"compose:ps"}}{{end}}'
