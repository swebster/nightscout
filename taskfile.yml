version: '3'

env:
  COMPOSE_ENV_FILES: .env,.env.local

vars:
  DOCKER:
    sh: which podman || which docker
  QUADLET_DIR: '{{.XDG_CONFIG_HOME | default (printf "%s/.config" .HOME)}}/containers/systemd'
  PODLET_FILE: .task/quadlet.config

run: when_changed

tasks:
  config:local:
    cmds:
      - ./configure_local.sh
    interactive: true
    sources:
      - configure_local.sh
    generates:
      - .env.local

  config:secrets:
    deps: [config:local]
    cmds:
      - ./configure_secrets.sh
    interactive: true
    sources:
      - configure_secrets.sh
    generates:
      - .env.secrets

  service:generate:
    deps: [config:local]
    cmds:
      - test ! -f {{.PODLET_FILE}} || grep "^{{.QUADLET_DIR}}/" {{.PODLET_FILE}} | xargs rm
      - ./configure_quadlet.sh
      - systemctl --user daemon-reload
    sources:
      - .env
      - .env.local
      - configure_quadlet.sh
      - docker-compose.yml
      - docker-compose.networks.yml
    generates:
      - '{{.PODLET_FILE}}'
    preconditions:
      - sh: test -d /run/systemd/system
        msg: Service tasks are only supported when using systemd.

  service:secrets:
    deps: [config:secrets]
    vars:
      MISSING_SECRETS:
        sh: >
          test {{base .DOCKER}} != podman ||
          grep -v COMPOSE_FILE .env.secrets | awk -F= '{print tolower($1)}' |
            xargs -I{} sh -c '{{.DOCKER}} secret exists {} || printf "%s\n" {}'
    cmds:
      - for: { var: MISSING_SECRETS }
        cmd: >
          awk -F= '$1 == "{{upper .ITEM}}" {printf("%s", $2)}' .env.secrets |
            {{.DOCKER}} secret create {{.ITEM}} -
    preconditions:
      - sh: test {{base .DOCKER}} = podman
        msg: Installation of secrets is only supported when using podman.
    status:
      - test {{len .MISSING_SECRETS}} -eq 0

  service:start:
    deps: [service:secrets, compose:images]
    cmds:
      - task: systemctl:start

  service:status:
    cmds:
      - task: systemctl:status
        vars: { IGNORE_ERRORS: true }

  service:stop:
    cmds:
      - task: systemctl:stop
        vars: { REVERSE_ORDER: true }

  systemctl:*:
    internal: true
    deps: [service:generate]
    vars:
      COMMAND: '{{index .MATCH 0}}'
      SORT: '{{eq .REVERSE_ORDER true | ternary "sort -r" "sort"}}'
      SERVICES:
        sh: sed -n "s|^{{.QUADLET_DIR}}/\(.*\)\.container|\1|gp" {{.PODLET_FILE}} | {{.SORT}}
      EXIT_CODE: '{{eq .IGNORE_ERRORS true | ternary 0 `$?`}}'
    cmds:
      - sh -c 'systemctl --user {{.COMMAND}} {{splitList "\n" .SERVICES | join " "}};
        exit {{.EXIT_CODE}}'

  compose:images:
    deps: [config:local]
    vars:
      MISSING_IMAGES:
        sh: >
          comm -23
          <({{.DOCKER}} compose config --images | sort)
          <({{.DOCKER}} images --filter dangling=false --format {{`{{.Repository}}:{{.Tag}}`}} |
            sed -E 's|^docker.io/(library/)?||' | sort)
    cmds:
      - test {{len .MISSING_IMAGES}} -eq 0 || echo "Couldn't find the following images:"
      - for: { var: MISSING_IMAGES }
        cmd: printf '%s\n' {{.ITEM}}
      - '{{.DOCKER}} compose pull cloudflared mongo'
      - '{{.DOCKER}} compose build nightscout caddy'
    sources:
      - caddy/*
      - cgm-remote-monitor/*
    status:
      - test {{len .MISSING_IMAGES}} -eq 0

  compose:ps:
    deps: [config:local]
    cmds:
      - '{{.DOCKER}} compose ps'

  compose:up:
    deps: [config:secrets, compose:images]
    env:
      COMPOSE_ENV_FILES: '{{printf "%s,.env.secrets" .COMPOSE_ENV_FILES}}'
    cmds:
      - '{{.DOCKER}} compose up --detach'

  compose:down:
    deps: [config:secrets, compose:images]
    env:
      COMPOSE_ENV_FILES: '{{printf "%s,.env.secrets" .COMPOSE_ENV_FILES}}'
    cmds:
      - '{{.DOCKER}} compose down'

  default:
    deps: [compose:ps]
